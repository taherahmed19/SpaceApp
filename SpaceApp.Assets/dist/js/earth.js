/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/js/api/api-endpoints.js":
/*!*************************************!*\
  !*** ./src/js/api/api-endpoints.js ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"applicationEndpoints\": () => (/* binding */ applicationEndpoints)\n/* harmony export */ });\n﻿const applicationEndpoints = {\r\n    IssTles: () => {\r\n        return {\r\n            method: 'GET',\r\n            resource: `http://spaceappapi-local.co.uk/api/space/GetISSTles`,\r\n            params: {},\r\n            accept: \"application/json\",\r\n            contentType: null,\r\n            body: null,\r\n        }\r\n    },\r\n    IssLocation: () => {\r\n        return {\r\n            method: 'GET',\r\n            resource: `http://spaceappapi-local.co.uk/api/space/GetISS`,\r\n            params: {},\r\n            accept: \"application/json\",\r\n            contentType: null,\r\n            body: null,\r\n        }\r\n    },\r\n    NearEarthObjects: () => {\r\n        return {\r\n            method: 'GET',\r\n            resource: `http://spaceappapi-local.co.uk/api/space/GetNearEarthObjects`,\r\n            params: {},\r\n            accept: \"application/json\",\r\n            contentType: null,\r\n            body: null,\r\n        }\r\n    },\r\n    Asteroid: (params) => {\r\n        return {\r\n            method: 'GET',\r\n            resource: `http://spaceappapi-local.co.uk/api/space/GetAsteroid`,\r\n            params: params ? params : null,\r\n            accept: \"application/json\",\r\n            contentType: null,\r\n            body: null,\r\n        }\r\n    },\r\n    CityLocations: (params) => {\r\n        return {\r\n            method: 'GET',\r\n            resource: `http://spaceappapi-local.co.uk/api/space/getcitylocations`,\r\n            params: params ? params : null,\r\n            accept: \"application/json\",\r\n            contentType: null,\r\n            body: null,\r\n        }\r\n    }\r\n}\n\n//# sourceURL=webpack://asp.net/./src/js/api/api-endpoints.js?");

/***/ }),

/***/ "./src/js/api/fetch-api.js":
/*!*********************************!*\
  !*** ./src/js/api/fetch-api.js ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _api_endpoints__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./api-endpoints */ \"./src/js/api/api-endpoints.js\");\n﻿\r\n\r\nclass Api {\r\n    constructor() {\r\n        this.endpoints = _api_endpoints__WEBPACK_IMPORTED_MODULE_0__.applicationEndpoints;\r\n    }\r\n\r\n    makeApiCall(method = \"\", callback, params = {}, body = {}) {\r\n        const endpoint = this.endpoints[method];\r\n        if (endpoint) {\r\n            const apiCall = endpoint(params, body);\r\n            return this.request(apiCall, callback);\r\n        }\r\n    };\r\n\r\n    async request(endpoint = {}, callback = () => { }) {\r\n        try {\r\n            if (endpoint) {\r\n                let url = `${endpoint.resource}${endpoint.method == \"GET\" && endpoint.params ? '?' + (new URLSearchParams(endpoint.params)).toString() : ''}`;\r\n\r\n                fetch(url, {\r\n                    'method': endpoint.method,\r\n                    'body': endpoint.body ? JSON.stringify(endpoint.body) : null,\r\n                    'accept': endpoint.accept,\r\n                    'content-type': endpoint.contentType ? endpoint.contentType : null,\r\n                }).then(async (response) => {\r\n                    const data = await response.json();\r\n                    callback(data);\r\n                    return data;\r\n                }).catch((error) => {\r\n                    console.error(error)\r\n                    return error;\r\n                });\r\n            }\r\n        } catch (error) {\r\n            console.error(error)\r\n            return error;\r\n        }\r\n    };\r\n}\r\n\r\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (new Api());\n\n//# sourceURL=webpack://asp.net/./src/js/api/fetch-api.js?");

/***/ }),

/***/ "./src/js/data/enums.js":
/*!******************************!*\
  !*** ./src/js/data/enums.js ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"geolocationErrorCodes\": () => (/* binding */ geolocationErrorCodes),\n/* harmony export */   \"scenes\": () => (/* binding */ scenes)\n/* harmony export */ });\n//Geo location\r\nconst geolocationErrorCodes = {}\r\nObject.defineProperties(geolocationErrorCodes, {\r\n    permissionDenied: {\r\n        value: 1,\r\n        writable: false,\r\n    },\r\n    positionUnavailable: {\r\n        value: 2,\r\n        writable: false,\r\n    },\r\n    timeOut: {\r\n        value: 3,\r\n        writable: false,\r\n    }\r\n})\r\n\r\n//Next enum\r\nconst scenes = {}\r\n\r\nObject.defineProperties(scenes, {\r\n    columbusView: {\r\n        value: 1,\r\n        writable: false,\r\n    },\r\n    flatView: {\r\n        value: 2,\r\n        writable: false,\r\n    },\r\n    globe: {\r\n        value: 3,\r\n        writable: false,\r\n    }\r\n})\r\n\n\n//# sourceURL=webpack://asp.net/./src/js/data/enums.js?");

/***/ }),

/***/ "./src/js/data/iss-config.js":
/*!***********************************!*\
  !*** ./src/js/data/iss-config.js ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"cityNamesLabelStyle\": () => (/* binding */ cityNamesLabelStyle),\n/* harmony export */   \"globeConfig\": () => (/* binding */ globeConfig),\n/* harmony export */   \"viewerConfig\": () => (/* binding */ viewerConfig)\n/* harmony export */ });\nconst viewerConfig = {}\r\nObject.defineProperties(viewerConfig, {\r\n    shouldAnimate: {\r\n        value: true,\r\n        writable: false,\r\n    },\r\n    debug: {\r\n        value: false,\r\n        writable: false,\r\n    },\r\n    showAxis: {\r\n        value: false,\r\n        writable: false,\r\n    },\r\n    showTimeline: {\r\n        value: 'hidden',\r\n        writable: false,\r\n    },\r\n    showAnimationController: {\r\n        value: 'hidden',\r\n        writable: false,\r\n    },\r\n    showSkyAtmosphere: {\r\n        value: false,\r\n        writable: false,\r\n    },\r\n    enableLighting: {\r\n        value: false,\r\n        writable: false,\r\n    },\r\n    showSelectionIndicator: {\r\n        value: 'hidden',\r\n        writable: false,\r\n    },\r\n    useBrowserRecommendedResolution: {\r\n        value: false,\r\n        writable: false,\r\n    }\r\n});\r\n\r\nconst globeConfig = {}\r\nObject.defineProperties(globeConfig, {\r\n    //globe view zoom settings\r\n    globeMinimumZoomDistance: {\r\n        value: 250000,\r\n        writable: false,\r\n    },\r\n    globeMaximumZoomDistance: {\r\n        value: 20000000,\r\n        writable: false,\r\n    },\r\n    globeMinimumZoomRate: {\r\n        value: 350000,\r\n        writable: false,\r\n    },\r\n    columbusViewMinimumZoomDistance: {\r\n        value: 250000,\r\n        writable: false,\r\n    },\r\n    columbusViewMaximumZoomDistance: {\r\n        value: 40000000,\r\n        writable: false,\r\n    },\r\n    columbusViewMinimumZoomRate: {\r\n        value: 350000,\r\n        writable: false,\r\n    },\r\n    flatViewMinimumZoomDistance: {\r\n        value: 250000,\r\n        writable: false,\r\n    },\r\n    flatViewMaximumZoomDistance: {\r\n        value: Infinity,\r\n        writable: false,\r\n    },\r\n    //camera animation settings\r\n    flyToDurationGlobeView: {\r\n        value: 5,\r\n        writable: false,\r\n    },\r\n    flyToDuration2DView: {\r\n        value: 2,\r\n        writable: false,\r\n    },\r\n    flyToDurationColumbusView: {\r\n        value: 2,\r\n        writable: false,\r\n    },\r\n    flyToDurationReset: {\r\n        value: 0,\r\n        writable: false,\r\n    },\r\n    flyToDurationCurrentLocation: {\r\n        value: 3,\r\n        writable: false,\r\n    },\r\n    //camera settings\r\n    cameraHeight: {\r\n        value: 20203203,\r\n        writable: false,\r\n    },\r\n});\r\n\r\nconst cityNamesLabelStyle = {}\r\nObject.defineProperties(cityNamesLabelStyle, {\r\n    //label settings\r\n    font: {\r\n        value: '31px sans-serif',\r\n        writable: false,\r\n        enumerable: true,\r\n    },\r\n    fillColor: {\r\n        value: Cesium.Color.WHITE,\r\n        writable: false,\r\n        enumerable: true,\r\n    },\r\n    outlineWidth: {\r\n        value: 2,\r\n        writable: false,\r\n        enumerable: true,\r\n    },\r\n    outlineColor: {\r\n        value: Cesium.Color.BLACK,\r\n        writable: false,\r\n        enumerable: true,\r\n    },\r\n    style: {\r\n        value: Cesium.LabelStyle.FILL_AND_OUTLINE,\r\n        writable: false,\r\n        enumerable: true,\r\n    },\r\n    scale: {\r\n        value: 0.5,\r\n        writable: false,\r\n        enumerable: true,\r\n    },\r\n});\r\n\r\n\n\n//# sourceURL=webpack://asp.net/./src/js/data/iss-config.js?");

/***/ }),

/***/ "./src/js/data/notification-objects.js":
/*!*********************************************!*\
  !*** ./src/js/data/notification-objects.js ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"errorNotifications\": () => (/* binding */ errorNotifications),\n/* harmony export */   \"infoNotifications\": () => (/* binding */ infoNotifications)\n/* harmony export */ });\n//TODO: Refactor to make object properties read-only\r\nconst infoNotifications = {\r\n    fixedCamera: {\r\n        id: \"fixedCamera\",\r\n        showOnce: true,\r\n        displayed: false,\r\n        message: \"Camera is fixed to ISS\",\r\n        relatedNotification: null, //only show if a previous notification has been displayed\r\n    },\r\n    freeCamera: {\r\n        id: \"freeCamera\",\r\n        showOnce: true,\r\n        displayed: false,\r\n        message: \"Camera reset\",\r\n        relatedNotification: \"fixedCamera\", //only show if a previous notification has been displayed\r\n    },\r\n    dataRefresh: {\r\n        id: \"dataRefresh\",\r\n        showOnce: true,\r\n        displayed: false,\r\n        message: \"Refresh the page to get accurate position data\",\r\n        relatedNotification: null, //only show if a previous notification has been displayed\r\n    },\r\n}\r\n\r\nconst errorNotifications = {\r\n    trackedEntityAnimationInProgress: {\r\n        id: \"trackedEntityAnimationInProgress\",\r\n        showOnce: false,\r\n        displayed: false,\r\n        message: \"Cannot click during animation\",\r\n    },\r\n    satelliteAnimationInProgress: {\r\n        id: \"satelliteAnimationInProgress\",\r\n        showOnce: false,\r\n        displayed: false,\r\n        message: \"Cannot click during animation\",\r\n    },\r\n    geolocationAnimationInProgress: {\r\n        id: \"geolocationAnimationInProgress\",\r\n        showOnce: false,\r\n        displayed: false,\r\n        message: \"Cannot click during animation\",\r\n    },\r\n    geolocationNotSupported: {\r\n        id: \"geolocationNotSupported\",\r\n        showOnce: false,\r\n        displayed: false,\r\n        message: \"Geolocation is not supported. Change browsers.\",\r\n    },\r\n    geolocationDisabled: {\r\n        id: \"geolocationDisabled\",\r\n        showOnce: false,\r\n        displayed: false,\r\n        message: \"Geolocation is disabled. Please update browser settings.\",\r\n    },\r\n    geolocationUnavailable: {\r\n        id: \"geolocationUnavailable\",\r\n        showOnce: false,\r\n        displayed: false,\r\n        message: \"Geolocation is unavailable. Please try again.\",\r\n    },\r\n    geolocationTimeout: {\r\n        id: \"geolocationTimeout\",\r\n        showOnce: false,\r\n        displayed: false,\r\n        message: \"Geolocation request timed out. Please try again later.\",\r\n    },\r\n    geolocationDefault: {\r\n        id: \"geolocationDefault\",\r\n        showOnce: false,\r\n        displayed: false,\r\n        message: \"Geolocation error. Please try again later.\",\r\n    },\r\n}\r\n\r\n\n\n//# sourceURL=webpack://asp.net/./src/js/data/notification-objects.js?");

/***/ }),

/***/ "./src/js/earth.js":
/*!*************************!*\
  !*** ./src/js/earth.js ***!
  \*************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"setZoomSettings\": () => (/* binding */ setZoomSettings)\n/* harmony export */ });\n/* harmony import */ var _api_fetch_api__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./api/fetch-api */ \"./src/js/api/fetch-api.js\");\n/* harmony import */ var _ui_functionality_iss_space_viewer_controls__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./ui-functionality/iss-space-viewer-controls */ \"./src/js/ui-functionality/iss-space-viewer-controls.js\");\n/* harmony import */ var _ui_functionality_notifications__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./ui-functionality/notifications */ \"./src/js/ui-functionality/notifications.js\");\n/* harmony import */ var _data_iss_config__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./data/iss-config */ \"./src/js/data/iss-config.js\");\n/* harmony import */ var _ui_functionality_iss_space_viewer_details__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./ui-functionality/iss-space-viewer-details */ \"./src/js/ui-functionality/iss-space-viewer-details.js\");\n/* harmony import */ var _utlis_math__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./utlis/math */ \"./src/js/utlis/math.js\");\n﻿\r\n\r\n\r\n\r\n\r\n\r\n\r\n_api_fetch_api__WEBPACK_IMPORTED_MODULE_0__[\"default\"].makeApiCall(\"IssTles\", renderEarthViewer);\r\n\r\n/**\r\n * \r\n * @param {*} data \r\n */\r\nfunction renderEarthViewer(data) {\r\n    Cesium.Ion.defaultAccessToken = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJqdGkiOiI1YjhlOGFjMC1hYjQwLTRkN2QtYmIwYy0wMTUxNDJiZjMxOGIiLCJpZCI6MTA0NjM4LCJpYXQiOjE2NjA0MTQwNTh9.2gD9ETM4SVSm4lHrS3jOA9E7DHRSQhYlqQAOBtTLy6U';\r\n\r\n    // Initialize the Cesium viewer.\r\n    const viewer = new Cesium.Viewer('cesiumContainer', {\r\n        sceneMode: Cesium.SceneMode.SCENE3D,\r\n        imageryProvider: new Cesium.SingleTileImageryProvider({\r\n            url: \"/assets/images/earth-map-tiles.jpg\",\r\n            style: Cesium.IonWorldImageryStyle.AERIAL_WITH_LABELS\r\n        }),\r\n        baseLayerPicker: false, geocoder: false, homeButton: false, infoBox: false,\r\n        navigationHelpButton: false, sceneModePicker: false, fullscreenButton: false,\r\n    });\r\n\r\n    const scene = viewer.scene;\r\n    const clock = viewer.clock;\r\n\r\n    function setViewerWindowSettings() {\r\n        scene.skyAtmosphere.show = _data_iss_config__WEBPACK_IMPORTED_MODULE_3__.viewerConfig.showSkyAtmosphere;\r\n        scene.globe.enableLighting = _data_iss_config__WEBPACK_IMPORTED_MODULE_3__.viewerConfig.enableLighting;\r\n        viewer.animation.container.style.visibility = _data_iss_config__WEBPACK_IMPORTED_MODULE_3__.viewerConfig.showAnimationController;\r\n        viewer.timeline.container.style.visibility = _data_iss_config__WEBPACK_IMPORTED_MODULE_3__.viewerConfig.showTimeline;\r\n        viewer.useBrowserRecommendedResolution = _data_iss_config__WEBPACK_IMPORTED_MODULE_3__.viewerConfig.useBrowserRecommendedResolution;\r\n        viewer.screenSpaceEventHandler.removeInputAction(Cesium.ScreenSpaceEventType.LEFT_DOUBLE_CLICK);\r\n        viewer.selectionIndicator.viewModel.selectionIndicatorElement.style.visibility = _data_iss_config__WEBPACK_IMPORTED_MODULE_3__.viewerConfig.showSelectionIndicator;\r\n        viewer.forceResize();\r\n        clock.shouldAnimate = _data_iss_config__WEBPACK_IMPORTED_MODULE_3__.viewerConfig.shouldAnimate;\r\n    }\r\n\r\n    function setGlobeTextureSettings() {\r\n        const layers = scene.imageryLayers;\r\n        const imageLayer = layers._layers[0];\r\n        imageLayer.brightness = 0.6;\r\n    }\r\n\r\n    function interpolatePositionsAndVelocity(tleLine1, tleLine2) {\r\n        const satrec = satellite.twoline2satrec(\r\n            tleLine1,\r\n            tleLine2\r\n        );\r\n\r\n        const totalSeconds = 60 * 60 * 6; //6 hours of position data\r\n        const timestepInSeconds = 10;\r\n        const start = Cesium.JulianDate.fromDate(new Date());\r\n        const stop = Cesium.JulianDate.addSeconds(start, totalSeconds, new Cesium.JulianDate());\r\n        clock.startTime = start.clone();\r\n        clock.stopTime = stop.clone();\r\n        clock.currentTime = start.clone();\r\n        viewer.timeline.zoomTo(start, stop);\r\n        clock.clockRange = Cesium.ClockRange.LOOP_STOP;\r\n        clock.clockStep = Cesium.ClockStep.SYSTEM_CLOCK_MULTIPLIER; //set clock in real-time\r\n\r\n        const positionsOverTime = new Cesium.SampledPositionProperty();\r\n        const speedOverTime = new Cesium.SampledProperty(Number);\r\n\r\n        for (let i = 0; i < totalSeconds; i += timestepInSeconds) {\r\n            const time = Cesium.JulianDate.addSeconds(start, i, new Cesium.JulianDate());\r\n            const jsDate = Cesium.JulianDate.toDate(time);\r\n\r\n            const positionAndVelocity = satellite.propagate(satrec, jsDate);\r\n            const gmst = satellite.gstime(jsDate);\r\n            const p = satellite.eciToGeodetic(positionAndVelocity.position, gmst);\r\n\r\n            const speed = _utlis_math__WEBPACK_IMPORTED_MODULE_5__[\"default\"].convertVectorToSpeed(\r\n                positionAndVelocity.velocity.x,\r\n                positionAndVelocity.velocity.y,\r\n                positionAndVelocity.velocity.z)\r\n\r\n            const position = Cesium.Cartesian3.fromRadians(p.longitude, p.latitude, p.height * 1000); //height in km\r\n\r\n            positionsOverTime.addSample(time, position);\r\n            speedOverTime.addSample(time, speed)\r\n        }\r\n\r\n        return { positionsOverTime: positionsOverTime, speedOverTime: speedOverTime }\r\n    }\r\n\r\n    function addSatelliteEntity(entityPosition) {\r\n        const xOffset = -1200000;\r\n        const yOffset = -600000;\r\n        const zOffset = 950000;\r\n\r\n        const satelliteEntity = viewer.entities.add({\r\n            position: entityPosition,\r\n            model: {\r\n                uri: '/assets/models/ISS.glb',\r\n                minimumPixelSize: 8000,\r\n                maximumScale: 8000,\r\n            },\r\n            viewFrom: new Cesium.Cartesian3(xOffset, yOffset, zOffset),\r\n            path: {\r\n                leadTime: 0,\r\n                trailTime: 1000, //in seconds\r\n                width: 10,\r\n                material: new Cesium.PolylineGlowMaterialProperty({\r\n                    glowPower: 0.2,\r\n                    taperPower: 0.95,\r\n                    color: Cesium.Color.CORNFLOWERBLUE,\r\n                }),\r\n                show: false,\r\n            },\r\n            orientation: new Cesium.VelocityOrientationProperty(entityPosition) //https://cesium.com/learn/cesiumjs/ref-doc/VelocityOrientationProperty.html\r\n        });\r\n\r\n        return satelliteEntity;\r\n    }\r\n\r\n    function subscribleOnTickListener() {\r\n        const onTickListener = clock.onTick.addEventListener(function (clock) {\r\n            const currentTime = clock.currentTime;\r\n\r\n            if (_ui_functionality_iss_space_viewer_details__WEBPACK_IMPORTED_MODULE_4__[\"default\"].hasOwnProperty('configureTime')) _ui_functionality_iss_space_viewer_details__WEBPACK_IMPORTED_MODULE_4__[\"default\"].configureTime(currentTime)\r\n\r\n            if (currentTime.equals(clock.stopTime)) {\r\n                onTickListener()\r\n                viewer.entities.removeAll();\r\n                (0,_ui_functionality_notifications__WEBPACK_IMPORTED_MODULE_2__.showInfoNotification)(\"dataRefresh\", cesiumContainer)\r\n            }\r\n        });\r\n    }\r\n\r\n    function setCameraView(position) {\r\n        viewer.camera.setView({\r\n            destination: Cesium.Cartesian3.fromRadians(\r\n                position.longitude,\r\n                position.latitude,\r\n                _data_iss_config__WEBPACK_IMPORTED_MODULE_3__.globeConfig.cameraHeight\r\n            )\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Red = X\r\n     * Green = Y\r\n     * Blue = Z\r\n     * @param {*} show \r\n     * @param {*} position \r\n     */\r\n    function renderAxis(show, position) {\r\n        if (show) {\r\n            const hpr = new Cesium.HeadingPitchRoll(0, 0, 0);\r\n            const pointPosition = new Cesium.Cartesian3.fromRadians(\r\n                position.longitude, position.latitude, _data_iss_config__WEBPACK_IMPORTED_MODULE_3__.globeConfig.height\r\n            );\r\n\r\n            const frame = Cesium.Transforms.headingPitchRollToFixedFrame(pointPosition, hpr);\r\n            viewer.scene.primitives.add(new Cesium.DebugModelMatrixPrimitive({\r\n                modelMatrix: frame,\r\n                length: 800000,\r\n                width: 3.0\r\n            }));\r\n        }\r\n    }\r\n\r\n    function setTileLoadProgressEvent() {\r\n        // Wait for globe to load then execute function \r\n        let initialized = false;\r\n        scene.globe.tileLoadProgressEvent.addEventListener(() => {\r\n            if (!initialized && scene.globe.tilesLoaded === true) {\r\n                initialized = true;\r\n\r\n                const positionsAndVelocity = interpolatePositionsAndVelocity(data.line1.trim(), data.line2.trim())\r\n\r\n                const positionsOvertime = positionsAndVelocity.positionsOverTime;\r\n                const speedOverTime = positionsAndVelocity.speedOverTime;\r\n\r\n                const satelliteEntity = addSatelliteEntity(positionsOvertime);\r\n\r\n                const currentTime = clock.currentTime;\r\n                const initialPosition = Cesium.Cartographic.fromCartesian(satelliteEntity.position.getValue(currentTime));\r\n\r\n                subscribleOnTickListener()\r\n                setViewerWindowSettings()\r\n                setGlobeTextureSettings()\r\n                setCameraView(initialPosition)\r\n\r\n                setZoomSettings(scene, _data_iss_config__WEBPACK_IMPORTED_MODULE_3__.globeConfig.globeMinimumZoomDistance, _data_iss_config__WEBPACK_IMPORTED_MODULE_3__.globeConfig.globeMaximumZoomDistance, _data_iss_config__WEBPACK_IMPORTED_MODULE_3__.globeConfig.globeMinimumZoomRate)\r\n                renderAxis(_data_iss_config__WEBPACK_IMPORTED_MODULE_3__.viewerConfig.showAxis, initialPosition)\r\n\r\n                //UI elements\r\n                ;(0,_ui_functionality_iss_space_viewer_controls__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(viewer, scene, clock, satelliteEntity);\r\n                if (_ui_functionality_iss_space_viewer_details__WEBPACK_IMPORTED_MODULE_4__[\"default\"].hasOwnProperty('configureCoordinates')) _ui_functionality_iss_space_viewer_details__WEBPACK_IMPORTED_MODULE_4__[\"default\"].configureCoordinates(clock, satelliteEntity)\r\n                if (_ui_functionality_iss_space_viewer_details__WEBPACK_IMPORTED_MODULE_4__[\"default\"].hasOwnProperty('configureDetails')) _ui_functionality_iss_space_viewer_details__WEBPACK_IMPORTED_MODULE_4__[\"default\"].configureDetails()\r\n                if (_ui_functionality_iss_space_viewer_details__WEBPACK_IMPORTED_MODULE_4__[\"default\"].hasOwnProperty('configureVelocityAltitude')) _ui_functionality_iss_space_viewer_details__WEBPACK_IMPORTED_MODULE_4__[\"default\"].configureVelocityAltitude(clock, speedOverTime)\r\n\r\n                removeLoadingSpinner()\r\n                showCesiumContainer()\r\n            }\r\n        });\r\n    }\r\n\r\n    setTileLoadProgressEvent()\r\n}\r\n\r\n/**\r\n * \r\n * @param {*} minimumZoomDistance \r\n * @param {*} maximumZoomDistance \r\n * @param {*} minimumZoomRate \r\n */\r\nfunction setZoomSettings(scene, minimumZoomDistance, maximumZoomDistance, minimumZoomRate) {\r\n    scene.screenSpaceCameraController.minimumZoomDistance = minimumZoomDistance;\r\n    scene.screenSpaceCameraController.maximumZoomDistance = maximumZoomDistance;\r\n    scene.screenSpaceCameraController._minimumZoomRate = minimumZoomRate;\r\n}\r\n\r\n/**\r\n * \r\n */\r\nfunction removeLoadingSpinner() {\r\n    const loadingSpinner = document.querySelector(\".loading-spinner\");\r\n\r\n    if (loadingSpinner && cesiumContainer) {\r\n        loadingSpinner.style.display = \"none\";\r\n    }\r\n}\r\n\r\nfunction showCesiumContainer(){\r\n    const cesiumContainerWrapper = document.querySelector(\".cesiumContainer-wrapper\");\r\n    const cesiumViewer = document.querySelector(\".cesium-viewer\");\r\n\r\n    if(cesiumContainerWrapper && cesiumViewer){\r\n        cesiumContainerWrapper.classList.remove(\"invisible\")\r\n        cesiumViewer.style.visibility = \"visible\"\r\n    }\r\n}\r\n\r\n\n\n//# sourceURL=webpack://asp.net/./src/js/earth.js?");

/***/ }),

/***/ "./src/js/ui-functionality/iss-space-viewer-controls.js":
/*!**************************************************************!*\
  !*** ./src/js/ui-functionality/iss-space-viewer-controls.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ configureControls)\n/* harmony export */ });\n/* harmony import */ var _utlis_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utlis/utils */ \"./src/js/utlis/utils.js\");\n/* harmony import */ var _notifications__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./notifications */ \"./src/js/ui-functionality/notifications.js\");\n/* harmony import */ var _api_fetch_api__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../api/fetch-api */ \"./src/js/api/fetch-api.js\");\n/* harmony import */ var _data_enums__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../data/enums */ \"./src/js/data/enums.js\");\n/* harmony import */ var _earth__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../earth */ \"./src/js/earth.js\");\n/* harmony import */ var _data_iss_config__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../data/iss-config */ \"./src/js/data/iss-config.js\");\n﻿\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nfunction configureControls(viewer, scene, clock, satellite) {\r\n    const cesiumContainer = document.querySelector('#cesiumContainer');\r\n\r\n    if (cesiumContainer && viewer) {\r\n\r\n        function configureSceneModeButton() {\r\n            const sceneModeButton = cesiumContainer.querySelector('.js-cesium-3d-globe');\r\n            const scenesPanel = cesiumContainer.querySelector('.js-cesium-scenes-panel');\r\n            const controls = cesiumContainer.querySelector('.space-viewer-controls')\r\n\r\n            if (sceneModeButton && scenesPanel && controls) {\r\n                sceneModeButton.addEventListener(\"click\", () => {\r\n                    scenesPanel.classList.toggle(\"active\")\r\n                    controls.style.display = \"none\";\r\n                })\r\n            }\r\n\r\n            const scenePanelCloseButton = scenesPanel.querySelector('.space-viewer-controls__close');\r\n            const globeImages = cesiumContainer.querySelectorAll('.space-viewer-controls__icon--globe-icon');\r\n            const globe3dImage = cesiumContainer.querySelector('.space-viewer-controls__icon--3d-globe');\r\n            const globe2dImage = cesiumContainer.querySelector('.space-viewer-controls__icon--2d-globe');\r\n            const columbusViewImage = cesiumContainer.querySelector('.space-viewer-controls__icon--columbus-view');\r\n            const followSatelliteButton = cesiumContainer.querySelector('.js-cesium-follow-satellite');\r\n            const trackedEntityButton = cesiumContainer.querySelector('.js-cesium-tracked-entity');\r\n\r\n            if (scenePanelCloseButton && controls && globeImages && globe3dImage && globe2dImage && columbusViewImage && followSatelliteButton) {\r\n                //configure scene panel close button\r\n                scenePanelCloseButton.addEventListener(\"click\", () => {\r\n                    controls.style.display = \"flex\";\r\n                    scenesPanel.classList.toggle('active');\r\n\r\n                    const selectedScene = cesiumContainer.querySelector('[name=\"scene-mode\"]:checked');\r\n                    if (selectedScene) {\r\n                        const selectedSceneValue = Number(selectedScene.value);\r\n\r\n                        if (selectedSceneValue !== scene.mode) {\r\n                            viewer.trackedEntity = null;\r\n                            globeImages.forEach(globeImage => { globeImage.classList.remove('active'); })\r\n                            enableButtonsDuringAnimation()\r\n\r\n                            //configure view buttons\r\n                            switch (selectedSceneValue) {\r\n                                case _data_enums__WEBPACK_IMPORTED_MODULE_3__.scenes.flatView:\r\n                                    globe2dImage.classList.add('active');\r\n                                    trackedEntityButton.classList.add('hide')\r\n                                    scene.mode = Cesium.SceneMode.SCENE2D;\r\n                                    (0,_earth__WEBPACK_IMPORTED_MODULE_4__.setZoomSettings)(scene, _data_iss_config__WEBPACK_IMPORTED_MODULE_5__.globeConfig.flatViewMinimumZoomDistance, _data_iss_config__WEBPACK_IMPORTED_MODULE_5__.globeConfig.flatViewMaximumZoomDistance, _data_iss_config__WEBPACK_IMPORTED_MODULE_5__.globeConfig.flatViewMinimumZoomRate)\r\n                                    pointCameraToSatellite(_data_iss_config__WEBPACK_IMPORTED_MODULE_5__.globeConfig.flyToDurationReset);\r\n                                    break;\r\n                                case _data_enums__WEBPACK_IMPORTED_MODULE_3__.scenes.columbusView:\r\n                                    columbusViewImage.classList.add('active');\r\n                                    trackedEntityButton.classList.add('hide')\r\n                                    scene.mode = Cesium.SceneMode.COLUMBUS_VIEW;\r\n                                    (0,_earth__WEBPACK_IMPORTED_MODULE_4__.setZoomSettings)(scene, _data_iss_config__WEBPACK_IMPORTED_MODULE_5__.globeConfig.columbusViewMinimumZoomDistance, _data_iss_config__WEBPACK_IMPORTED_MODULE_5__.globeConfig.columbusViewMaximumZoomDistance, _data_iss_config__WEBPACK_IMPORTED_MODULE_5__.globeConfig.columbusViewMinimumZoomRate);\r\n                                    pointCameraToSatellite(_data_iss_config__WEBPACK_IMPORTED_MODULE_5__.globeConfig.flyToDurationReset)\r\n                                    break;\r\n                                default:\r\n                                    globe3dImage.classList.add('active');\r\n                                    trackedEntityButton.classList.remove('hide')\r\n                                    trackedEntityButton.classList.remove('active')\r\n                                    scene.mode = Cesium.SceneMode.SCENE3D;\r\n                                    (0,_earth__WEBPACK_IMPORTED_MODULE_4__.setZoomSettings)(scene, _data_iss_config__WEBPACK_IMPORTED_MODULE_5__.globeConfig.globeMinimumZoomDistance, _data_iss_config__WEBPACK_IMPORTED_MODULE_5__.globeConfig.globeMaximumZoomDistance, _data_iss_config__WEBPACK_IMPORTED_MODULE_5__.globeConfig.globeMinimumZoomRate)\r\n                                    pointCameraToSatellite(_data_iss_config__WEBPACK_IMPORTED_MODULE_5__.globeConfig.flyToDurationReset)\r\n                                    break;\r\n                            }\r\n                        }\r\n\r\n                    }\r\n                });\r\n            }\r\n        }\r\n\r\n        function configureSettingsButton() {\r\n            let isCityDataRetrieved = false;\r\n            const settingsButton = cesiumContainer.querySelector('.js-cesium-settings');\r\n            const cityLabelsPanel = cesiumContainer.querySelector('.js-cesium-settings-panel');\r\n            const controls = cesiumContainer.querySelector('.space-viewer-controls')\r\n\r\n            if (settingsButton && cityLabelsPanel && controls) {\r\n                settingsButton.addEventListener(\"click\", () => {\r\n                    cityLabelsPanel.classList.toggle(\"active\")\r\n                    controls.style.display = \"none\";\r\n                })\r\n            }\r\n\r\n            const scenePanelCloseButton = cityLabelsPanel.querySelector('.space-viewer-controls__close');\r\n            const showOrbitCheckbox = cityLabelsPanel.querySelector('#filter-orbit');\r\n            const showCityLabelsCheckbox = cityLabelsPanel.querySelector('#filter-city-labels');\r\n            const showAtmosphereCheckbox = cityLabelsPanel.querySelector('#filter-atmopshere');\r\n            const showLightingCheckbox = cityLabelsPanel.querySelector('#filter-lighting');\r\n            const labels = scene.primitives.add(new Cesium.LabelCollection());\r\n\r\n            if (scenePanelCloseButton && showOrbitCheckbox && showCityLabelsCheckbox && showAtmosphereCheckbox && showLightingCheckbox) {\r\n                scenePanelCloseButton.addEventListener(\"click\", () => {\r\n                    controls.style.display = \"flex\";\r\n                    cityLabelsPanel.classList.toggle('active');\r\n\r\n                    //configure orbit \r\n                    satellite.path.show = showOrbitCheckbox.checked\r\n\r\n                    //configure city labels\r\n                    if (showCityLabelsCheckbox.checked) {\r\n                        labels.show = true;\r\n                        if (!isCityDataRetrieved) {\r\n                            _api_fetch_api__WEBPACK_IMPORTED_MODULE_2__[\"default\"].makeApiCall(\"CityLocations\", renderCityNames); //make api call for city data\r\n                        }\r\n                    } else {\r\n                        labels.show = false;\r\n                    }\r\n\r\n                    //configure atmosphere\r\n                    scene.skyAtmosphere.show = showAtmosphereCheckbox.checked\r\n\r\n                    //configure lighting\r\n                    scene.globe.enableLighting = showLightingCheckbox.checked\r\n                })\r\n            }\r\n\r\n            //TODO: Break out into earth.js\r\n            function renderCityNames(cities) {\r\n                if (cities) {\r\n                    isCityDataRetrieved = true;\r\n\r\n                    const highestCityLocations = cities.HighestCityLocations;\r\n                    const medianCityLocations = cities.MedianCityLocations;\r\n                    const lowestCityLocations = cities.LowestCityLocations;\r\n\r\n                    const highestCitiesTranslucencyByDistance = undefined\r\n                    const medianCitiesTranslucencyByDistance = new Cesium.NearFarScalar(1.0e7, 1.0, 1.01e7, 0.0);\r\n                    const lowestCitiesTranslucencyByDistance = new Cesium.NearFarScalar(0.2e7, 1.0, 0.21e7, 0.0);\r\n\r\n                    highestCityLocations.forEach(city => {\r\n                        const latitude = city[\"CapitalLatitude\"];\r\n                        const longitude = city[\"CapitalLongitude\"];\r\n                        const name = city[\"CapitalName\"];\r\n\r\n                        if (latitude && longitude && name) {\r\n                            labels.add({\r\n                                position: Cesium.Cartesian3.fromDegrees(longitude, latitude, 0),\r\n                                text: name,\r\n                                ..._data_iss_config__WEBPACK_IMPORTED_MODULE_5__.cityNamesLabelStyle,\r\n                                translucencyByDistance: highestCitiesTranslucencyByDistance,\r\n                            });\r\n                        }\r\n                    })\r\n\r\n                    medianCityLocations.forEach(city => {\r\n                        const latitude = city[\"CapitalLatitude\"];\r\n                        const longitude = city[\"CapitalLongitude\"];\r\n                        const name = city[\"CapitalName\"];\r\n\r\n                        if (latitude && longitude && name) {\r\n                            labels.add({\r\n                                position: Cesium.Cartesian3.fromDegrees(longitude, latitude, 10),\r\n                                text: name,\r\n                                ..._data_iss_config__WEBPACK_IMPORTED_MODULE_5__.cityNamesLabelStyle,\r\n                                translucencyByDistance: medianCitiesTranslucencyByDistance\r\n                            });\r\n                        }\r\n                    })\r\n\r\n                    lowestCityLocations.forEach(city => {\r\n                        const latitude = city[\"CapitalLatitude\"];\r\n                        const longitude = city[\"CapitalLongitude\"];\r\n                        const name = city[\"CapitalName\"];\r\n\r\n                        if (latitude && longitude && name) {\r\n                            labels.add({\r\n                                position: Cesium.Cartesian3.fromDegrees(longitude, latitude, 10),\r\n                                text: name,\r\n                                ..._data_iss_config__WEBPACK_IMPORTED_MODULE_5__.cityNamesLabelStyle,\r\n                                translucencyByDistance: lowestCitiesTranslucencyByDistance\r\n                            });\r\n                        }\r\n                    })\r\n                }\r\n            }\r\n        }\r\n\r\n        function configureFullScreenButton() {\r\n            const fullscreenButton = cesiumContainer.querySelector('.js-cesium-fullscreen');\r\n            if (fullscreenButton) {\r\n                fullscreenButton.addEventListener(\"click\", () => {\r\n                    (0,_utlis_utils__WEBPACK_IMPORTED_MODULE_0__.applyFullscreen)(cesiumContainer)\r\n                })\r\n            }\r\n        }\r\n\r\n        function configureTrackedEntity() {\r\n            const trackedEntityButton = cesiumContainer.querySelector('.js-cesium-tracked-entity');\r\n\r\n            if (trackedEntityButton) {\r\n                trackedEntityButton.addEventListener(\"click\", () => {\r\n                    if (!trackedEntityButton.classList.contains(\"js-disabled\")) {\r\n                        if (!viewer.trackedEntity) {\r\n                            viewer.trackedEntity = satellite;\r\n                            trackedEntityButton.classList.add(\"active\")\r\n\r\n                            ;(0,_notifications__WEBPACK_IMPORTED_MODULE_1__.showInfoNotification)(\"fixedCamera\", cesiumContainer)\r\n                            enableButtonsDuringAnimation()\r\n\r\n                        } else {\r\n                            disableButtonsDuringAnimation()\r\n                            trackedEntityButton.classList.remove(\"active\")\r\n\r\n                            pointCameraToSatellite(_data_iss_config__WEBPACK_IMPORTED_MODULE_5__.globeConfig.flyToDurationGlobeView, function () {\r\n                                enableButtonsDuringAnimation()\r\n                                ;(0,_notifications__WEBPACK_IMPORTED_MODULE_1__.showInfoNotification)(\"freeCamera\", cesiumContainer)\r\n                                viewer.trackedEntity = null;\r\n                            });\r\n                        }\r\n                    } else {\r\n                        (0,_notifications__WEBPACK_IMPORTED_MODULE_1__.showErrorNotification)(\"trackedEntityAnimationInProgress\", cesiumContainer)\r\n                    }\r\n                })\r\n            }\r\n        }\r\n\r\n        function configureFollowSatelliteButton() {\r\n            const followSatelliteButton = cesiumContainer.querySelector('.js-cesium-follow-satellite');\r\n\r\n            if (followSatelliteButton) {\r\n                followSatelliteButton.addEventListener(\"click\", () => {\r\n                    if (!followSatelliteButton.classList.contains('js-disabled')) {\r\n\r\n                        switch (scene.mode) {\r\n                            case 1: //columbus view\r\n                                handleCameraColumbusView()\r\n                                break;\r\n                            case 2: //2d view\r\n                                handleCamera2DView()\r\n                                break;\r\n                            case 3: //globe view\r\n                                handleCameraGlobeView()\r\n                                break;\r\n                        }\r\n                    } else {\r\n                        (0,_notifications__WEBPACK_IMPORTED_MODULE_1__.showErrorNotification)(\"satelliteAnimationInProgress\", cesiumContainer)\r\n                    }\r\n                })\r\n            }\r\n\r\n            function handleCameraColumbusView() {\r\n                disableButtonsDuringAnimation()\r\n\r\n                pointCameraToSatellite(_data_iss_config__WEBPACK_IMPORTED_MODULE_5__.globeConfig.flyToDurationColumbusView, function () {\r\n                    enableButtonsDuringAnimation()\r\n                });\r\n            }\r\n\r\n            function handleCamera2DView() {\r\n                disableButtonsDuringAnimation()\r\n\r\n                pointCameraToSatellite(_data_iss_config__WEBPACK_IMPORTED_MODULE_5__.globeConfig.flyToDuration2DView, function () {\r\n                    enableButtonsDuringAnimation()\r\n                });\r\n            }\r\n\r\n            function handleCameraGlobeView() {\r\n                disableButtonsDuringAnimation()\r\n\r\n                pointCameraToSatellite(_data_iss_config__WEBPACK_IMPORTED_MODULE_5__.globeConfig.flyToDurationGlobeView, function () {\r\n                    enableButtonsDuringAnimation()\r\n                    ;(0,_notifications__WEBPACK_IMPORTED_MODULE_1__.showInfoNotification)(\"freeCamera\", cesiumContainer)\r\n                });\r\n                viewer.trackedEntity = null;\r\n            }\r\n        }\r\n\r\n        function configureCurrentLocationButton() {\r\n            const trackedEntityButton = cesiumContainer.querySelector('.js-cesium-tracked-entity');\r\n            const currentLocationButton = cesiumContainer.querySelector('.js-cesium-current-location');\r\n            const billboardCollection = scene.primitives.add(new Cesium.BillboardCollection());\r\n            const billboard = billboardCollection.add({\r\n                image: 'assets/images/location-pin.svg',\r\n                scale: 0.1,\r\n                verticalOrigin: Cesium.VerticalOrigin.BOTTOM,\r\n                show: false\r\n            });\r\n            const currentLocationMarkerHeight = 1000;\r\n            const currentLocationCameraHeight = 1000000\r\n\r\n            let isPointingToCurrentLocation = false;\r\n\r\n            if (currentLocationButton && trackedEntityButton) {\r\n                currentLocationButton.addEventListener(\"click\", () => {\r\n                    if (!currentLocationButton.classList.contains(\"js-disabled\")) {\r\n                        if (!isPointingToCurrentLocation) {\r\n                            if (!(0,_utlis_utils__WEBPACK_IMPORTED_MODULE_0__.geolocationApiBrowserSupport)()) { //geolocation feature not supported by browser\r\n                                (0,_notifications__WEBPACK_IMPORTED_MODULE_1__.showErrorNotification)(\"geolocationNotSupported\", cesiumContainer)\r\n                                return;\r\n                            }\r\n\r\n                            (0,_utlis_utils__WEBPACK_IMPORTED_MODULE_0__.requestGeolocation)(successCallback, errorCallback)\r\n                        } else {\r\n                            currentLocationButton.classList.remove(\"active\")\r\n\r\n                            //reset values\r\n                            billboard.show = false;\r\n                            isPointingToCurrentLocation = false;\r\n                        }\r\n                    } else {\r\n                        (0,_notifications__WEBPACK_IMPORTED_MODULE_1__.showErrorNotification)(\"geolocationAnimationInProgress\", cesiumContainer)\r\n                    }\r\n                })\r\n            }\r\n\r\n            function successCallback(position) {\r\n                if (position && position.coords) {\r\n                    const coords = position.coords;\r\n                    const latitude = coords.latitude;\r\n                    const longitude = coords.longitude;\r\n\r\n                    if (latitude && longitude) {\r\n                        //Add active class to button\r\n                        viewer.trackedEntity = null;\r\n                        currentLocationButton.classList.add(\"active\")\r\n                        trackedEntityButton.classList.remove(\"active\")\r\n                        disableButtonsDuringAnimation()\r\n                        billboard.position = new Cesium.Cartesian3.fromDegrees(longitude, latitude, currentLocationMarkerHeight);\r\n                        billboard.show = true;\r\n\r\n                        viewer.camera.flyTo({\r\n                            destination: Cesium.Cartesian3.fromDegrees(\r\n                                longitude,\r\n                                latitude,\r\n                                currentLocationCameraHeight),\r\n                            duration: _data_iss_config__WEBPACK_IMPORTED_MODULE_5__.globeConfig.flyToDurationCurrentLocation,\r\n                            complete: function () {\r\n                                isPointingToCurrentLocation = true;\r\n                                enableButtonsDuringAnimation()\r\n                            }\r\n                        });\r\n\r\n                        isPointingToCurrentLocation = true;\r\n                    }\r\n                }\r\n            }\r\n\r\n            function errorCallback(error) {\r\n                (0,_utlis_utils__WEBPACK_IMPORTED_MODULE_0__.handleErrorCallback)(error, _notifications__WEBPACK_IMPORTED_MODULE_1__.showErrorNotification, cesiumContainer)\r\n            }\r\n        }\r\n        //TODO: Break out into earth.js\r\n        function pointCameraToSatellite(duration, completeFunction) {\r\n            let position = null;\r\n            try {\r\n                //position = JSON.parse(sessionStorage.getItem(\"IssPosition\"))\r\n                position = Cesium.Cartographic.fromCartesian(satellite.position.getValue(viewer.clock.currentTime))\r\n            } catch (err) {\r\n                console.error(err);\r\n            }\r\n\r\n            if (position) {\r\n                viewer.camera.flyTo({\r\n                    destination: Cesium.Cartesian3.fromRadians(\r\n                        position.longitude,\r\n                        position.latitude,\r\n                        _data_iss_config__WEBPACK_IMPORTED_MODULE_5__.globeConfig.cameraHeight),\r\n                    duration: duration,\r\n                    complete: completeFunction\r\n                });\r\n            }\r\n        }\r\n\r\n        function enableButtonsDuringAnimation() {\r\n            const followSatelliteButton = cesiumContainer.querySelector('.js-cesium-follow-satellite');\r\n            const currentLocationButton = cesiumContainer.querySelector('.js-cesium-current-location');\r\n            const trackedEntityButton = cesiumContainer.querySelector('.js-cesium-tracked-entity');\r\n\r\n            if (followSatelliteButton && currentLocationButton && trackedEntityButton) {\r\n                followSatelliteButton.classList.remove(\"js-disabled\")\r\n                currentLocationButton.classList.remove(\"js-disabled\")\r\n                trackedEntityButton.classList.remove(\"js-disabled\")\r\n            }\r\n        }\r\n\r\n        function disableButtonsDuringAnimation() {\r\n            const followSatelliteButton = cesiumContainer.querySelector('.js-cesium-follow-satellite');\r\n            const currentLocationButton = cesiumContainer.querySelector('.js-cesium-current-location');\r\n            const trackedEntityButton = cesiumContainer.querySelector('.js-cesium-tracked-entity');\r\n\r\n            if (followSatelliteButton && currentLocationButton && trackedEntityButton) {\r\n                followSatelliteButton.classList.add(\"js-disabled\")\r\n                currentLocationButton.classList.add(\"js-disabled\")\r\n                trackedEntityButton.classList.add(\"js-disabled\")\r\n            }\r\n        }\r\n\r\n        configureSceneModeButton()\r\n        configureSettingsButton()\r\n        configureFullScreenButton()\r\n        configureTrackedEntity()\r\n        configureFollowSatelliteButton()\r\n        configureCurrentLocationButton()\r\n    }\r\n}\n\n//# sourceURL=webpack://asp.net/./src/js/ui-functionality/iss-space-viewer-controls.js?");

/***/ }),

/***/ "./src/js/ui-functionality/iss-space-viewer-details.js":
/*!*************************************************************!*\
  !*** ./src/js/ui-functionality/iss-space-viewer-details.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _utlis_math__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utlis/math */ \"./src/js/utlis/math.js\");\n/* harmony import */ var _utlis_string__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utlis/string */ \"./src/js/utlis/string.js\");\n\r\n\r\n\r\nconst additionalDetails = {}\r\n\r\nconst timeElement = document.querySelector('.js-details-time');\r\n\r\nif (timeElement) {\r\n    /**\r\n     * \r\n     * @param {*} currentTime \r\n     */\r\n    additionalDetails.configureTime = function (currentTime) {\r\n        if (timeElement) {\r\n            const dateTime = Cesium.JulianDate.toDate(currentTime);\r\n            const day = dateTime.getDate().toString().padStart(2, '0');\r\n            const month = (dateTime.getMonth() + 1).toString().padStart(2, '0');\r\n            const year = dateTime.getFullYear()\r\n\r\n            const hours = dateTime.getHours().toString().padStart(2, '0');\r\n            const minutes = dateTime.getMinutes().toString().padStart(2, '0');\r\n            const seconds = dateTime.getSeconds().toString().padStart(2, '0');\r\n\r\n            const date = `${day}/${month}/${year}`;\r\n            const time = `${hours}:${minutes}:${seconds}`\r\n\r\n            timeElement.textContent = `${date} ${time}`\r\n        }\r\n    }\r\n}\r\n\r\nconst latitudeElement = document.querySelector('.js-details-latitude')\r\nconst longitudeElement = document.querySelector('.js-details-longitude')\r\nconst altitudeElement = document.querySelector('.js-details-altitude')\r\n\r\nif (latitudeElement && longitudeElement) {\r\n    /**\r\n     * 7 decimal places for lat/lng is sufficient for coordinates precision. See: https://rapidlasso.com/2019/05/06/how-many-decimal-digits-for-storing-longitude-latitude/\r\n     * @param {*} clock \r\n     * @param {*} satelliteEntity \r\n     */\r\n    additionalDetails.configureCoordinates = function (clock, satelliteEntity) {\r\n        setInterval(function () {\r\n            const currentTime = clock.currentTime;\r\n            const position = Cesium.Cartographic.fromCartesian(satelliteEntity.position.getValue(currentTime));\r\n            const latitude = Cesium.Math.toDegrees(position.latitude).toFixed(7);\r\n            const longitude = Cesium.Math.toDegrees(position.longitude).toFixed(7);\r\n            const altitude = _utlis_math__WEBPACK_IMPORTED_MODULE_0__[\"default\"].convertMetresToMiles(position.height).toFixed(2) // Position returns height in meters\r\n\r\n            latitudeElement.textContent = latitude;\r\n            longitudeElement.textContent = longitude;\r\n            altitudeElement.textContent = `${altitude} miles`;\r\n        }, 1500)\r\n    }\r\n}\r\n\r\nconst velocityElement = document.querySelector('.js-details-velocity');\r\n\r\nif (velocityElement) {\r\n    additionalDetails.configureVelocityAltitude = function (clock, speedOverTime) {\r\n        setInterval(function () {\r\n            const currentTime = clock.currentTime;\r\n            const speed = speedOverTime.getValue(currentTime).toFixed(2);\r\n\r\n            velocityElement.textContent = `${_utlis_string__WEBPACK_IMPORTED_MODULE_1__[\"default\"].formatNumber(speed)} mph`;\r\n        }, 2000);\r\n    }\r\n}\r\n\r\nconst spaceViewerDetails = document.querySelector('.space-viewer-details')\r\nconst visibilityButton = document.querySelector('.js-details-visibility')\r\nconst detailsContent = document.querySelector('.js-details-content')\r\nconst velocityAltitudeContainer = document.querySelector('.js-altitude-velocity')\r\n\r\nif (spaceViewerDetails && visibilityButton && detailsContent) {\r\n    /**\r\n     * \r\n     */\r\n    additionalDetails.configureDetails = function () {\r\n        if (visibilityButton && detailsContent) {\r\n            visibilityButton.addEventListener(\"click\", () => {\r\n                detailsContent.classList.toggle(\"position-absolute\")\r\n                detailsContent.classList.toggle(\"invisible\")\r\n                velocityAltitudeContainer.classList.toggle(\"invisible\")\r\n                spaceViewerDetails.classList.toggle(\"active\")\r\n            })\r\n        }\r\n\r\n        //time in orbit\r\n        const orbitTimeElement = document.querySelector('.js-orbit-time');\r\n\r\n        if (orbitTimeElement) {\r\n            const initialDate = new Date(\"1998-11-25\")\r\n            const currentDate = new Date()\r\n\r\n            const dateDifferenceTime = currentDate.getTime() - initialDate.getTime();\r\n            const dateDifferenceDays = dateDifferenceTime / (1000 * 3600 * 24)\r\n\r\n            var years = Math.floor(dateDifferenceDays / 365);\r\n            var days = Math.floor(dateDifferenceDays % 365);\r\n\r\n            orbitTimeElement.textContent = `${years} years : ${days} days`\r\n        }\r\n    }\r\n}\r\n\r\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (additionalDetails); \n\n//# sourceURL=webpack://asp.net/./src/js/ui-functionality/iss-space-viewer-details.js?");

/***/ }),

/***/ "./src/js/ui-functionality/notifications.js":
/*!**************************************************!*\
  !*** ./src/js/ui-functionality/notifications.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"showErrorNotification\": () => (/* binding */ showErrorNotification),\n/* harmony export */   \"showInfoNotification\": () => (/* binding */ showInfoNotification)\n/* harmony export */ });\n/* harmony import */ var _data_notification_objects__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../data/notification-objects */ \"./src/js/data/notification-objects.js\");\n﻿\r\n\r\nconst notificationDisplayTime = 4000 //ms\r\n\r\n/**\r\n * TODO: Extend to add showOnce logic if needed\r\n * @param {*} message \r\n * @param {*} container \r\n */\r\nfunction showErrorNotification(property, container) {\r\n    if (container && _data_notification_objects__WEBPACK_IMPORTED_MODULE_0__.errorNotifications.hasOwnProperty(property)) {\r\n        const notificationData = _data_notification_objects__WEBPACK_IMPORTED_MODULE_0__.errorNotifications[property];\r\n        const id = notificationData.id;\r\n        const message = notificationData.message;\r\n\r\n        if (id && message) {\r\n            const notificationWrapper = container.querySelector('.notification-wrapper');\r\n\r\n            if (notificationWrapper) {\r\n                const existingNotification = notificationWrapper.querySelector(`[data-notification-id='${id}']`);\r\n\r\n                if (!existingNotification) {\r\n                    const template = `\r\n                        <div class=\"notification notification--error\" data-notification-id=\"${id}\">\r\n                            <div class=\"notification__text-wrapper\">\r\n                                <p class=\"notification__title\">${message}</p>\r\n                            </div>\r\n                            <button class=\"notification__close-btn js-notification-close\" type=\"button\">\r\n                                <img src=\"/assets/images/close.svg\"/>\r\n                            </button>\r\n                        </div>\r\n                    `;\r\n\r\n                    notificationWrapper.insertAdjacentHTML(\"afterbegin\", template);\r\n\r\n                    const notificationTimeout = setTimeout(function () {\r\n                        const existingNotification = notificationWrapper.querySelector(`[data-notification-id='${id}']`);\r\n                        if (existingNotification) {\r\n                            existingNotification.remove();\r\n                        }\r\n                    }, notificationDisplayTime);\r\n\r\n                    configureCloseButton(id, notificationTimeout);\r\n                }\r\n            }\r\n        }\r\n\r\n    } else {\r\n        console.error(`Element error: ${container}`);\r\n    }\r\n}\r\n\r\nfunction showInfoNotification(property, container) {\r\n    if (container && _data_notification_objects__WEBPACK_IMPORTED_MODULE_0__.infoNotifications.hasOwnProperty(property)) {\r\n        const notificationData = _data_notification_objects__WEBPACK_IMPORTED_MODULE_0__.infoNotifications[property];\r\n        const relatedNotification = _data_notification_objects__WEBPACK_IMPORTED_MODULE_0__.infoNotifications[notificationData.relatedNotification];\r\n\r\n        if (relatedNotification == null || relatedNotification.displayed) {\r\n            const id = notificationData.id;\r\n            const message = notificationData.message;\r\n            const showOnce = notificationData.showOnce;\r\n            const displayed = notificationData.displayed;\r\n\r\n            if (showOnce && displayed == false) {\r\n                notificationData.displayed = true;\r\n                renderNotification()\r\n            }\r\n\r\n            function renderNotification() {\r\n                const notificationWrapper = container.querySelector('.notification-wrapper');\r\n\r\n                if (id && message && notificationWrapper) {\r\n                    const existingNotification = notificationWrapper.querySelector(`[data-notification-id='${id}']`);\r\n\r\n                    if (!existingNotification) {\r\n                        const template = `\r\n                            <div class=\"notification notification--info\" data-notification-id=\"${id}\">\r\n                                <div class=\"notification__text-wrapper\">\r\n                                    <p class=\"notification__title\">${message}</p>\r\n                                </div>\r\n                                <button class=\"notification__close-btn js-notification-close\" type=\"button\">\r\n                                    <img src=\"/assets/images/close.svg\"/>\r\n                                </button>\r\n                            </div>\r\n                        `;\r\n\r\n                        notificationWrapper.insertAdjacentHTML(\"afterbegin\", template);\r\n\r\n                        const notificationTimeout = setTimeout(function () {\r\n                            const existingNotification = notificationWrapper.querySelector(`[data-notification-id='${id}']`);\r\n                            if (existingNotification) {\r\n                                existingNotification.remove();\r\n                            }\r\n                        }, notificationDisplayTime);\r\n\r\n                        configureCloseButton(id, notificationTimeout);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n\r\n    } else {\r\n        console.error(`Property error: ${container}`);\r\n    }\r\n}\r\n\r\nfunction configureCloseButton(notificationId, notificationTimeout) {\r\n    const closeBtn = document.querySelector('.js-notification-close');\r\n\r\n    if (closeBtn) {\r\n        closeBtn.addEventListener(\"click\", () => {\r\n            const notificationElement = closeBtn.closest(`[data-notification-id='${notificationId}']`);\r\n\r\n            if (notificationElement) {\r\n                const textElement = notificationElement.querySelector('.notification__title');\r\n\r\n                if (textElement && !notificationElement.classList.contains('d-none')) {\r\n                    notificationElement.remove();\r\n                    clearTimeout(notificationTimeout)\r\n                }\r\n            }\r\n        })\r\n    }\r\n}\n\n//# sourceURL=webpack://asp.net/./src/js/ui-functionality/notifications.js?");

/***/ }),

/***/ "./src/js/utlis/math.js":
/*!******************************!*\
  !*** ./src/js/utlis/math.js ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\nconst mathOperations = {}\r\n/**\r\n * //to convert to speed = pythag theorom: https://github.com/shashwatak/satellite-js/issues/29\r\n * Km/s -> km/h -> mph\r\n * 1km/s = 3600 km/h\r\n * 1km/h = 0.621371 mph\r\n * 1km/s = 2236.94 mph\r\n * @param {*} x \r\n * @param {*} y \r\n * @param {*} z \r\n */\r\nmathOperations.convertVectorToSpeed = function (x, y, z) {\r\n    const mPerHourInKmPerSec = 2236.9362920544;\r\n    const kmPerSec = Math.sqrt(Math.pow(x, 2) + Math.pow(y, 2) + Math.pow(z, 2))\r\n    return kmPerSec * mPerHourInKmPerSec;\r\n}\r\n\r\nmathOperations.convertMetresToMiles = function (number) {\r\n    const oneMetreInMiles = 0.000621;\r\n    return number * oneMetreInMiles;\r\n}\r\n\r\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (mathOperations);\n\n//# sourceURL=webpack://asp.net/./src/js/utlis/math.js?");

/***/ }),

/***/ "./src/js/utlis/string.js":
/*!********************************!*\
  !*** ./src/js/utlis/string.js ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\nconst stringOperations = {};\r\n\r\nstringOperations.formatNumber = function (number) {\r\n    return number.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',');\r\n}\r\n\r\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (stringOperations);\n\n//# sourceURL=webpack://asp.net/./src/js/utlis/string.js?");

/***/ }),

/***/ "./src/js/utlis/utils.js":
/*!*******************************!*\
  !*** ./src/js/utlis/utils.js ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"applyFullscreen\": () => (/* binding */ applyFullscreen),\n/* harmony export */   \"geolocationApiBrowserSupport\": () => (/* binding */ geolocationApiBrowserSupport),\n/* harmony export */   \"handleErrorCallback\": () => (/* binding */ handleErrorCallback),\n/* harmony export */   \"requestGeolocation\": () => (/* binding */ requestGeolocation)\n/* harmony export */ });\n/* harmony import */ var _data_enums__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../data/enums */ \"./src/js/data/enums.js\");\n﻿\r\n\r\nfunction applyFullscreen(element) {\r\n    if (document.fullscreenElement == null) {\r\n        if (element.requestFullscreen) {\r\n            element.requestFullscreen();\r\n        } else if (element.webkitRequestFullscreen) { /* Safari */\r\n            element.webkitRequestFullscreen();\r\n        }\r\n    } else {\r\n        if (document.exitFullscreen) {\r\n            document.exitFullscreen();\r\n        } else if (document.webkitExitFullscreen) { /* Safari */\r\n            document.webkitExitFullscreen();\r\n        }\r\n    }\r\n}\r\n\r\nfunction requestGeolocation(successCallback, errorCallback) {\r\n    const options = {\r\n        enableHighAccuracy: true,\r\n        maximumAge: 1000 * 60 * 60 * 24, //how long to cache position data for - cache for 1 day\r\n        timeout: 27000\r\n    }\r\n\r\n    if (navigator && 'geolocation' in navigator && navigator.geolocation) {\r\n        try {\r\n            navigator.geolocation.getCurrentPosition(successCallback, errorCallback, options);\r\n        } catch (error) {\r\n            console.error(error);\r\n        }\r\n    }\r\n}\r\n\r\nfunction geolocationApiBrowserSupport() {\r\n    return navigator.geolocation;\r\n}\r\n\r\nfunction handleErrorCallback(error, errorNotificationCallback, container) {\r\n    if (error != null && error.code != null && errorNotificationCallback && container) {\r\n        \r\n        switch (error.code) {\r\n            case _data_enums__WEBPACK_IMPORTED_MODULE_0__.geolocationErrorCodes.permissionDenied:\r\n                errorNotificationCallback(\"geolocationDisabled\", container)\r\n                break;\r\n            case _data_enums__WEBPACK_IMPORTED_MODULE_0__.geolocationErrorCodes.positionUnavailable:\r\n                errorNotificationCallback(\"geolocationUnavailable\", container)\r\n                break;\r\n            case _data_enums__WEBPACK_IMPORTED_MODULE_0__.geolocationErrorCodes.timeOut:\r\n                errorNotificationCallback(\"geolocationTimeout\", container)\r\n                break;\r\n            default:\r\n                errorNotificationCallback(\"geolocationDefault\", container)\r\n                break;\r\n        }\r\n    }\r\n}\n\n//# sourceURL=webpack://asp.net/./src/js/utlis/utils.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module is referenced by other modules so it can't be inlined
/******/ 	var __webpack_exports__ = __webpack_require__("./src/js/earth.js");
/******/ 	
/******/ })()
;